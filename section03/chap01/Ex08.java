package section03.chap01;
// 단항 연산자
// x++ 연산자: 반환값은 값 그대로. 부수효과는 1 증가
// ++x 연산자: 반환값은 1 증가한 값. 부수효과는 1 증가
// x-- 연산자: 반환값은 값 그대로. 부수효과는 1 감소
// --x 연산자: 반환값은 1 감소한 값. 부수효과는 1 감소
public class Ex08 {
    public static void main(String[] args) {
        int int1 = 3;                             // int1 = 3

        int int2 = int1++;                        // int2에 int1의 현재값인 3을 먼저 할당 후, int1의 값을 1 증가 (int2 = 3, int1 = 4)
        int int3 = ++int1;                        // 먼저 int1의 값을 1 증가시킨 후, int3에 int1의 증가된 값을 할당 (int1 = 5, int3 = 5)
        int int4 = -(int2-- * --int3);            // int2의 값에서 1을 빼는건 나중에 하고, int3의 값을 하나 먼저 뺀다.
                                                  // int2의 값은 현재 3, --int3를 통해 int3의 값은 4   *연산하면 12가 되고 int4는 -12가 할당,
                                                  // 이후 int2는 -1되어 int2 = 2
                                                  // *** int1 = 5, int2 = 2, int3 = 4, int4 = -12 ***
        //================================================================================================================================
        int x = 1;
        //  메서드 안으로도 '반환'되어 사용되는 것
        System.out.println(x++);            // x++은 x를 먼저 출력한 후에 나중에 1을 더하는 것이므로, 출력결과는 1이고 현재 x = 2인 상태
        System.out.println(++x);            // ++x는 x를 먼저 1 증가시킨 다음 출력하는 것. x = 3인 상태를 출력
        System.out.println(x);              // x = 3

        //  ⚠️ 리터럴에는 사용 불가
//        int int5 = 3++;          // 이미 어떤 변수안에 있는 값을 바꾸는 것이므로 리터럴에는 사용 불가
//        int int6 = --3;
    }
}
